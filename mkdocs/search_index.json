{
    "docs": [
        {
            "location": "/",
            "text": "Programa\u00e7\u00e3o Orientada a Objeto\n\u00b6\n\n\nReposit\u00f3rio no Github\n\u00b6\n\n\nAcesse os exerc\u00edcios no Reposit\u00f3rio do Github \nprogramacao.orientada.objeto\n.\n\n\nDescri\u00e7\u00e3o\n\u00b6\n\n\nC\u00f3digos desenvolvidos com a Linguagem Java na disciplina de Programa\u00e7\u00e3o Orientada a Objetos do curso de Analise e Desenvolvimento de Sistemas da FATEC de Franca.\n\n\n\n\nAluno:\n Getulio Vinicius Teixeira da Silva\n\n\nProfessor:\n Dr. Daniel Facciolo Pires\n\n\n\n\nOs exerc\u00edcios foram feitos em sala de aula, laborat\u00f3rio, no 1\u00ba Semestre do ano de 2017 utilizando:\n\n\n\n\nIDE: Netbeans 8.1;\n\n\nJDK: OpenJDK 1.8.0_121;\n\n\nSistema Operacional: Ubuntu 16.04 LTS.\n\n\n\n\nLicen\u00e7a\n\u00b6\n\n\nGNU GENERAL PUBLIC LICENSE - Version 3, 29 June 2007\n.",
            "title": "Inicio"
        },
        {
            "location": "/#programacao_orientada_a_objeto",
            "text": "",
            "title": "Programa\u00e7\u00e3o Orientada a Objeto"
        },
        {
            "location": "/#repositorio_no_github",
            "text": "Acesse os exerc\u00edcios no Reposit\u00f3rio do Github  programacao.orientada.objeto .",
            "title": "Reposit\u00f3rio no Github"
        },
        {
            "location": "/#descricao",
            "text": "C\u00f3digos desenvolvidos com a Linguagem Java na disciplina de Programa\u00e7\u00e3o Orientada a Objetos do curso de Analise e Desenvolvimento de Sistemas da FATEC de Franca.   Aluno:  Getulio Vinicius Teixeira da Silva  Professor:  Dr. Daniel Facciolo Pires   Os exerc\u00edcios foram feitos em sala de aula, laborat\u00f3rio, no 1\u00ba Semestre do ano de 2017 utilizando:   IDE: Netbeans 8.1;  JDK: OpenJDK 1.8.0_121;  Sistema Operacional: Ubuntu 16.04 LTS.",
            "title": "Descri\u00e7\u00e3o"
        },
        {
            "location": "/#licenca",
            "text": "GNU GENERAL PUBLIC LICENSE - Version 3, 29 June 2007 .",
            "title": "Licen\u00e7a"
        },
        {
            "location": "/lista-1/",
            "text": "Lista de Exerc\u00edcios 1\n\u00b6\n\n\nLista de exerc\u00edcios propostos pelo \nProf. Daniel Facciolo Pires\n.\n\n\n\n\nClasses\n\n\nObjetos\n\n\nM\u00e9todos Construtores\n\n\nVari\u00e1veis\n\n\nM\u00e9todos de inst\u00e2ncia\n\n\n\n\nAcesse os \nC\u00f3digos\n.\n\n\nExerc\u00edcio 1:\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada Aluno contendo as vari\u00e1veis de inst\u00e2ncia numeroAluno (int), nome (String), idade (int), p1 (float) e p2 (float),\n\n\nCrie o construtor\n\n\nCrie os m\u00e9todos notaFinal() - que calcula e retorna a m\u00e9dia final do aluno - , e dadosAluno() - que retorna os valores de numeroAluno, nome e idade.\n\n\nCriar uma classe TestaAluno com o m\u00e9todo main() para instancia\u00e7\u00e3o da classe Aluno (atribui\u00e7\u00e3o das vari\u00e1veis de inst\u00e2ncia com quaisquer valores e chamada dos m\u00e9todos notaFinal() e dadosAluno()).\n\n\nAdicionar o m\u00e9todo passou() \u00e0 classe Aluno a fim de verificar se o aluno passou. Chame o m\u00e9todo passou() na classe TestaAluno a fim de testa-lo.\n\n\n\n\nExerc\u00edcio 2:\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada Cliente contendo as vari\u00e1veis de inst\u00e2ncia numeroConta (int), numeroAgencia (int), nome (String) e saldo (float),\n\n\nCrie um m\u00e9todo construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado.\n\n\nCrie os m\u00e9todos public  realizarDeposito() e realizarSaque() que, realizam dep\u00f3sito e saque, respectivamente, na conta do cliente.\n\n\nCrie um outro m\u00e9todo public que retorna o numero da conta, nome do cliente e saldo atual.\n\n\nCriar uma classe TestaCliente para instancia\u00e7\u00e3o da classe Cliente como Fulano. Chamar os m\u00e9todos realizarDeposito() e realizarSaque() nessa classe para que o saldo seja modificado.\n\n\nCriar, tamb\u00e9m na classe TestaCliente, um outro cliente (Beltrano) e realizar as mesmas atividades do Fulano.\n\n\n\n\nExerc\u00edcio 3:\n\u00b6\n\n\n\n\nImplemente em Java uma classe chamada Produto contendo as vari\u00e1veis id (int), descri\u00e7\u00e3o (String), qtde (int) e preco (float). Essa classe deve possuir os dois m\u00e9todos construtores, com e sem par\u00e2metros, e ainda os m\u00e9todos:\n\n\ncomprar(int x): que compra um produto aumentando em x a quantidade em estoque;\n\n\nvender(int x): que vende um produto aumentando em x a quantidade em estoque;\n\n\nsubir(float x): que aumenta o pre\u00e7o do produto em x unidades;\n\n\ndescer(float x): que diminui o pre\u00e7o do produto em x unidades;\n\n\nmostra(): que mostra todas as informa\u00e7\u00f5es do produto\n\n\nFinalmente, cria uma classe TestaProduto, que cria dois Produtos (cada um deve utilizar um construtor diferente) e teste os m\u00e9todos criados.\n\n\n\n\nExerc\u00edcio 4:\n\u00b6\n\n\n\n\nImplemente em Java uma classe chamada Rio contendo as vari\u00e1veis nome(String), n\u00edvel (float) e polu\u00eddo (boolean). Essa classe deve possuir os dois m\u00e9todos construtores, com e sem par\u00e2metros, e ainda os m\u00e9todos:\n\n\nchover(float): que aumenta o n\u00edvel atual do rio;\n\n\nensolarar(float): que diminui o n\u00edvel atual do rio;\n\n\nlimpar(): que limpa o rio;\n\n\nsujar(): que polui o rio;\n\n\nmostra(): que mostra todas as informa\u00e7\u00f5es do rio.\n\n\nFinalmente, cria uma classe TestaRio, que cria dois Rios (cada um deve utilizar um construtor diferente) e teste os m\u00e9todos criados.",
            "title": "Lista de exerc\u00edcios 1"
        },
        {
            "location": "/lista-1/#lista_de_exercicios_1",
            "text": "Lista de exerc\u00edcios propostos pelo  Prof. Daniel Facciolo Pires .   Classes  Objetos  M\u00e9todos Construtores  Vari\u00e1veis  M\u00e9todos de inst\u00e2ncia   Acesse os  C\u00f3digos .",
            "title": "Lista de Exerc\u00edcios 1"
        },
        {
            "location": "/lista-1/#exercicio_1",
            "text": "Crie uma classe em Java chamada Aluno contendo as vari\u00e1veis de inst\u00e2ncia numeroAluno (int), nome (String), idade (int), p1 (float) e p2 (float),  Crie o construtor  Crie os m\u00e9todos notaFinal() - que calcula e retorna a m\u00e9dia final do aluno - , e dadosAluno() - que retorna os valores de numeroAluno, nome e idade.  Criar uma classe TestaAluno com o m\u00e9todo main() para instancia\u00e7\u00e3o da classe Aluno (atribui\u00e7\u00e3o das vari\u00e1veis de inst\u00e2ncia com quaisquer valores e chamada dos m\u00e9todos notaFinal() e dadosAluno()).  Adicionar o m\u00e9todo passou() \u00e0 classe Aluno a fim de verificar se o aluno passou. Chame o m\u00e9todo passou() na classe TestaAluno a fim de testa-lo.",
            "title": "Exerc\u00edcio 1:"
        },
        {
            "location": "/lista-1/#exercicio_2",
            "text": "Crie uma classe em Java chamada Cliente contendo as vari\u00e1veis de inst\u00e2ncia numeroConta (int), numeroAgencia (int), nome (String) e saldo (float),  Crie um m\u00e9todo construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado.  Crie os m\u00e9todos public  realizarDeposito() e realizarSaque() que, realizam dep\u00f3sito e saque, respectivamente, na conta do cliente.  Crie um outro m\u00e9todo public que retorna o numero da conta, nome do cliente e saldo atual.  Criar uma classe TestaCliente para instancia\u00e7\u00e3o da classe Cliente como Fulano. Chamar os m\u00e9todos realizarDeposito() e realizarSaque() nessa classe para que o saldo seja modificado.  Criar, tamb\u00e9m na classe TestaCliente, um outro cliente (Beltrano) e realizar as mesmas atividades do Fulano.",
            "title": "Exerc\u00edcio 2:"
        },
        {
            "location": "/lista-1/#exercicio_3",
            "text": "Implemente em Java uma classe chamada Produto contendo as vari\u00e1veis id (int), descri\u00e7\u00e3o (String), qtde (int) e preco (float). Essa classe deve possuir os dois m\u00e9todos construtores, com e sem par\u00e2metros, e ainda os m\u00e9todos:  comprar(int x): que compra um produto aumentando em x a quantidade em estoque;  vender(int x): que vende um produto aumentando em x a quantidade em estoque;  subir(float x): que aumenta o pre\u00e7o do produto em x unidades;  descer(float x): que diminui o pre\u00e7o do produto em x unidades;  mostra(): que mostra todas as informa\u00e7\u00f5es do produto  Finalmente, cria uma classe TestaProduto, que cria dois Produtos (cada um deve utilizar um construtor diferente) e teste os m\u00e9todos criados.",
            "title": "Exerc\u00edcio 3:"
        },
        {
            "location": "/lista-1/#exercicio_4",
            "text": "Implemente em Java uma classe chamada Rio contendo as vari\u00e1veis nome(String), n\u00edvel (float) e polu\u00eddo (boolean). Essa classe deve possuir os dois m\u00e9todos construtores, com e sem par\u00e2metros, e ainda os m\u00e9todos:  chover(float): que aumenta o n\u00edvel atual do rio;  ensolarar(float): que diminui o n\u00edvel atual do rio;  limpar(): que limpa o rio;  sujar(): que polui o rio;  mostra(): que mostra todas as informa\u00e7\u00f5es do rio.  Finalmente, cria uma classe TestaRio, que cria dois Rios (cada um deve utilizar um construtor diferente) e teste os m\u00e9todos criados.",
            "title": "Exerc\u00edcio 4:"
        },
        {
            "location": "/lista-2/",
            "text": "Lista de Exerc\u00edcios 2\n\u00b6\n\n\nLista de exerc\u00edcios propostos pelo \nProf. Daniel Facciolo Pires\n.\n\n\n\n\nVari\u00e1veis de Inst\u00e2ncia X Vari\u00e1veis de Classe\n\n\nM\u00e9todos de Inst\u00e2ncia X M\u00e9todos de Classe\n\n\nConstrutores\n\n\n\n\nAcesse os \nC\u00f3digos\n.\n\n\nExerc\u00edcio 1\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada Veiculo contendo as vari\u00e1veis de inst\u00e2ncia Tipo (String), nroRodas (int), cor (String) e ano (int), e a vari\u00e1vel de classe nomeDono (String);\n\n\nCrie os construtores obrigat\u00f3rios;\n\n\nCrie um m\u00e9todo de inst\u00e2ncia chamado alteraTipo que altera o tipo de um Veiculo;\n\n\nCrie um m\u00e9todo de inst\u00e2ncia chamado mostra que retorna todas as informa\u00e7\u00f5es de um objeto;\n\n\nCrie um m\u00e9todo de classe chamado alteraNome que altera o nome do dono de um ve\u00edculo;\n\n\nCrie um m\u00e9todo de classe chamado retornaNome que retorna o nome do dono de um ve\u00edculo\n\n\nCrie um m\u00e9todo de classe auxiliar chamado nroRodas que recebe o n\u00famero de rodas e retorna se esse n\u00famero \u00e9 par ou \u00edmpar.\n\n\nCrie um m\u00e9todo de classe auxiliar chamado retornaNovoVeiculo que recebe dois ve\u00edculos como par\u00e2metro e retorna um novo ve\u00edculo contendo o tipo do primeiro ve\u00edculo, a soma do n\u00famero de rodas dos dois ve\u00edculos passados como par\u00e2metro, a cor do segundo ve\u00edculo, e o ano do maior ve\u00edculo dentre os dois passados como par\u00e2metro;\n\n\nCriar a classe TestaVeiculo com as seguintes atividades:\n\n\nInstancia\u00e7\u00f5es da classe Ve\u00edculo com os objetos Carro e Moto;\n\n\nImpress\u00e3o das vari\u00e1veis dos objetos Carro e Moto (chamado do m\u00e9todo mostra());\n\n\nModifica\u00e7\u00e3o do conte\u00fado de todas as vari\u00e1veis do objeto Moto; Para alterar o nome do dono, utilize o m\u00e9todo espec\u00edfico;\n\n\nImprimir novamente as vari\u00e1veis de inst\u00e2ncia dos objetos Carro e Moto. O que aconteceu com as vari\u00e1veis do objeto Carro?\n\n\nMostre o uso do m\u00e9todo nroRodas\n\n\nMostre o uso do m\u00e9todo retornaNovoVeiculo\n\n\n\n\n\n\n\n\nExerc\u00edcio 2\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada Cliente contendo as vari\u00e1veis de inst\u00e2ncia numeroConta (String), numeroAgencia (String), nome (String) e static saldo (float),\n\n\nCrie um m\u00e9todo construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado. Forne\u00e7a tamb\u00e9m um construtor sem argumento com valores default caso nenhum inicializador seja fornecido\n\n\nCrie os m\u00e9todos de inst\u00e2ncia realizarDeposito() e realizarSaque() que realizam dep\u00f3sito e saque, respectivamente, na conta do cliente.\n\n\nCrie um outro m\u00e9todo de inst\u00e2ncia para imprimir o numero da conta, nome do cliente e saldo atual.\n\n\nCrie um m\u00e9todo de classe que altera o saldo do Cliente\n\n\nCrie um m\u00e9todo de classe que retorna o saldo do Cliente\n\n\nCrie um m\u00e9todo de inst\u00e2ncia que altera o n\u00famero de ag\u00eancia do cliente\n\n\nCrie um m\u00e9todo de inst\u00e2ncia que retorna o n\u00famero de ag\u00eancia do cliente\n\n\nCrie um m\u00e9todo de classe auxiliar chamado retornaNovoCliente que receba dois clientes como par\u00e2metro e retorna um terceiro cliente, sendo que este deve ter a soma dos saldos dos clientes passados como par\u00e2metro, o n\u00famero de ag\u00eancia do primeiro cliente passado como par\u00e2metro, o n\u00famero da conta do segundo cliente passado como par\u00e2metro e o nome Fulano.\n\n\nCrie um m\u00e9todo de classe auxiliar chamado verificaTamanho que recebe o n\u00famero da ag\u00eancia de um cliente e retorna se este n\u00famero tem exatamente tamanho 6.\n\n\nCriar uma classe chamada TestaCliente para instancia\u00e7\u00e3o da classe Cliente como Fulano. Chamar os m\u00e9todos realizarDeposito() e realizarSaque() nessa classe para que o saldo seja modificado .\n\n\nCriar, tamb\u00e9m na classe teste, um outro cliente (Beltrano) e realizar as mesmas atividades do Fulano. Realizar testes de modo que apresente como o Fulano pode alterar o saldo de Beltrano.\n\n\nFinalmente, mostre na classe TestaCliente o uso dos m\u00e9todos retornaNovoCliente e verificaTamanho\n\n\n\n\nExerc\u00edcio 3\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada MeuString. No m\u00e9todo main(), str1 deve ser instanciada como \u201cmeu primeiro string\u201d. Ap\u00f3s isso, imprima o comprimento e o caracter na posi\u00e7\u00e3o 2 de str1 utilizando m\u00e9todos de inst\u00e2ncia.\n\n\nAinda no m\u00e9todo main(), crie um str2 (String) a partir do valor do comprimento de str1.  Utilize apenas m\u00e9todos de classe.\n\n\n\n\nExerc\u00edcio 4\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada Computador contendo uma vari\u00e1vel de inst\u00e2ncia processador (String) e uma vari\u00e1vel de classe ram (int).\n\n\nCrie os construtores da classe.\n\n\nCrie um m\u00e9todo de inst\u00e2ncia para alterar o valor do processador\n\n\nCrie um m\u00e9todo de classe para alterar o valor da ram\n\n\nCrie ainda um m\u00e9todo auxiliar de classe para fazer upgrade na mem\u00f3ria (sempre adicionar mais 256 MB).\n\n\nFinalmente, crie uma classe que teste a primeira (ComputadorTeste). Instancie objetos e fa\u00e7a chamadas aos m\u00e9todos criados com objetivo de test\u00e1-los.",
            "title": "Lista de exerc\u00edcios 2"
        },
        {
            "location": "/lista-2/#lista_de_exercicios_2",
            "text": "Lista de exerc\u00edcios propostos pelo  Prof. Daniel Facciolo Pires .   Vari\u00e1veis de Inst\u00e2ncia X Vari\u00e1veis de Classe  M\u00e9todos de Inst\u00e2ncia X M\u00e9todos de Classe  Construtores   Acesse os  C\u00f3digos .",
            "title": "Lista de Exerc\u00edcios 2"
        },
        {
            "location": "/lista-2/#exercicio_1",
            "text": "Crie uma classe em Java chamada Veiculo contendo as vari\u00e1veis de inst\u00e2ncia Tipo (String), nroRodas (int), cor (String) e ano (int), e a vari\u00e1vel de classe nomeDono (String);  Crie os construtores obrigat\u00f3rios;  Crie um m\u00e9todo de inst\u00e2ncia chamado alteraTipo que altera o tipo de um Veiculo;  Crie um m\u00e9todo de inst\u00e2ncia chamado mostra que retorna todas as informa\u00e7\u00f5es de um objeto;  Crie um m\u00e9todo de classe chamado alteraNome que altera o nome do dono de um ve\u00edculo;  Crie um m\u00e9todo de classe chamado retornaNome que retorna o nome do dono de um ve\u00edculo  Crie um m\u00e9todo de classe auxiliar chamado nroRodas que recebe o n\u00famero de rodas e retorna se esse n\u00famero \u00e9 par ou \u00edmpar.  Crie um m\u00e9todo de classe auxiliar chamado retornaNovoVeiculo que recebe dois ve\u00edculos como par\u00e2metro e retorna um novo ve\u00edculo contendo o tipo do primeiro ve\u00edculo, a soma do n\u00famero de rodas dos dois ve\u00edculos passados como par\u00e2metro, a cor do segundo ve\u00edculo, e o ano do maior ve\u00edculo dentre os dois passados como par\u00e2metro;  Criar a classe TestaVeiculo com as seguintes atividades:  Instancia\u00e7\u00f5es da classe Ve\u00edculo com os objetos Carro e Moto;  Impress\u00e3o das vari\u00e1veis dos objetos Carro e Moto (chamado do m\u00e9todo mostra());  Modifica\u00e7\u00e3o do conte\u00fado de todas as vari\u00e1veis do objeto Moto; Para alterar o nome do dono, utilize o m\u00e9todo espec\u00edfico;  Imprimir novamente as vari\u00e1veis de inst\u00e2ncia dos objetos Carro e Moto. O que aconteceu com as vari\u00e1veis do objeto Carro?  Mostre o uso do m\u00e9todo nroRodas  Mostre o uso do m\u00e9todo retornaNovoVeiculo",
            "title": "Exerc\u00edcio 1"
        },
        {
            "location": "/lista-2/#exercicio_2",
            "text": "Crie uma classe em Java chamada Cliente contendo as vari\u00e1veis de inst\u00e2ncia numeroConta (String), numeroAgencia (String), nome (String) e static saldo (float),  Crie um m\u00e9todo construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado. Forne\u00e7a tamb\u00e9m um construtor sem argumento com valores default caso nenhum inicializador seja fornecido  Crie os m\u00e9todos de inst\u00e2ncia realizarDeposito() e realizarSaque() que realizam dep\u00f3sito e saque, respectivamente, na conta do cliente.  Crie um outro m\u00e9todo de inst\u00e2ncia para imprimir o numero da conta, nome do cliente e saldo atual.  Crie um m\u00e9todo de classe que altera o saldo do Cliente  Crie um m\u00e9todo de classe que retorna o saldo do Cliente  Crie um m\u00e9todo de inst\u00e2ncia que altera o n\u00famero de ag\u00eancia do cliente  Crie um m\u00e9todo de inst\u00e2ncia que retorna o n\u00famero de ag\u00eancia do cliente  Crie um m\u00e9todo de classe auxiliar chamado retornaNovoCliente que receba dois clientes como par\u00e2metro e retorna um terceiro cliente, sendo que este deve ter a soma dos saldos dos clientes passados como par\u00e2metro, o n\u00famero de ag\u00eancia do primeiro cliente passado como par\u00e2metro, o n\u00famero da conta do segundo cliente passado como par\u00e2metro e o nome Fulano.  Crie um m\u00e9todo de classe auxiliar chamado verificaTamanho que recebe o n\u00famero da ag\u00eancia de um cliente e retorna se este n\u00famero tem exatamente tamanho 6.  Criar uma classe chamada TestaCliente para instancia\u00e7\u00e3o da classe Cliente como Fulano. Chamar os m\u00e9todos realizarDeposito() e realizarSaque() nessa classe para que o saldo seja modificado .  Criar, tamb\u00e9m na classe teste, um outro cliente (Beltrano) e realizar as mesmas atividades do Fulano. Realizar testes de modo que apresente como o Fulano pode alterar o saldo de Beltrano.  Finalmente, mostre na classe TestaCliente o uso dos m\u00e9todos retornaNovoCliente e verificaTamanho",
            "title": "Exerc\u00edcio 2"
        },
        {
            "location": "/lista-2/#exercicio_3",
            "text": "Crie uma classe em Java chamada MeuString. No m\u00e9todo main(), str1 deve ser instanciada como \u201cmeu primeiro string\u201d. Ap\u00f3s isso, imprima o comprimento e o caracter na posi\u00e7\u00e3o 2 de str1 utilizando m\u00e9todos de inst\u00e2ncia.  Ainda no m\u00e9todo main(), crie um str2 (String) a partir do valor do comprimento de str1.  Utilize apenas m\u00e9todos de classe.",
            "title": "Exerc\u00edcio 3"
        },
        {
            "location": "/lista-2/#exercicio_4",
            "text": "Crie uma classe em Java chamada Computador contendo uma vari\u00e1vel de inst\u00e2ncia processador (String) e uma vari\u00e1vel de classe ram (int).  Crie os construtores da classe.  Crie um m\u00e9todo de inst\u00e2ncia para alterar o valor do processador  Crie um m\u00e9todo de classe para alterar o valor da ram  Crie ainda um m\u00e9todo auxiliar de classe para fazer upgrade na mem\u00f3ria (sempre adicionar mais 256 MB).  Finalmente, crie uma classe que teste a primeira (ComputadorTeste). Instancie objetos e fa\u00e7a chamadas aos m\u00e9todos criados com objetivo de test\u00e1-los.",
            "title": "Exerc\u00edcio 4"
        },
        {
            "location": "/lista-3/",
            "text": "Lista de Exerc\u00edcios 3\n\u00b6\n\n\nLista de exerc\u00edcios propostos pelo \nProf. Daniel Facciolo Pires\n.\n\n\n\n\nEncapsulamento\n\n\nCria\u00e7\u00e3o de Pacotes\n\n\n\n\nAcesse os \nC\u00f3digos\n.\n\n\nExerc\u00edcio 1\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada Cliente contendo as vari\u00e1veis de inst\u00e2ncia private numeroConta (String), numeroAgencia (String), nome (String) e saldo (float), e os m\u00e9todos getters e setters para todas as vari\u00e1veis privadas. Para a cria\u00e7\u00e3o dos m\u00e9todos setters, o n\u00famero da conta deve obrigatoriamente ter tamanho 8, contando o tra\u00e7o do d\u00edgito verificador. O n\u00famero da ag\u00eancia deve ter tamanho 6, tamb\u00e9m contando o tra\u00e7o do d\u00edgito verificador. Verificar em ambos os casos a presen\u00e7a do d\u00edgito verificador. O nome do cliente n\u00e3o pode ultrapassar 30 caracteres. O saldo da conta n\u00e3o tem restri\u00e7\u00e3o;\n\n\nColoque a classe Cliente em um pacote;\n\n\nCrie os m\u00e9todos public  realizarDeposito() e realizarSaque() que, realizam dep\u00f3sito e saque, respectivamente, na conta do cliente. Crie um outro m\u00e9todo public para imprimir o numero da conta, nome da agencia, nome do cliente e saldo atual. Crie um m\u00e9todo construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado. Forne\u00e7a um construtor sem argumento com valores default caso nenhum inicializador seja fornecido;\n\n\nCrie um arquivo .jar do seu projeto. Em seguida, crie outro projeto para testar sua classe Cliente. Adicione o .JAR do primeiro projeto nesse segundo projeto;\n\n\nCriar uma classe Teste para instancia\u00e7\u00e3o da classe Cliente como Fulano. Chamar os m\u00e9todos realizarDeposito() e realizarSaque() nessa classe para que o saldo seja modificado. Nao se esque\u00e7a de importar a classe Cliente na classe Teste;\n\n\nTente acessar as vari\u00e1veis de inst\u00e2ncia da classe Cliente sem os m\u00e9todos get e set. O que acontece?\n\n\nCriar, tamb\u00e9m na classe teste, um outro cliente (Beltrano) e realizar as mesmas atividades do Fulano. N\u00e3o se esque\u00e7a de importar a classe Cliente na classe Teste.\n\n\n\n\nExerc\u00edcio 2\n\u00b6\n\n\n\n\nCrie uma classe em Java chamada Aluno contendo as vari\u00e1veis de inst\u00e2ncia private numeroAluno (int), nome (String), idade (int), p1 (float) e p2 (float), e os m\u00e9todos getters e setters para todas as vari\u00e1veis privadas. Para a cria\u00e7\u00e3o dos m\u00e9todos setters, assuma que: o n\u00famero do aluno deve ter tamanho exatamente igual a 6. O nome do aluno n\u00e3o pode ultrapassar tamanho 30. A idade, e as notas p1 e p2 n\u00e3o podem ser negativas;\n\n\nColoque a classe Aluno em um pacote;\n\n\nCrie os m\u00e9todos public notaFinal() - que calcula e imprime a m\u00e9dia final do aluno - , e dadosAluno() - que imprime as vari\u00e1veis de inst\u00e2ncia numeroAluno, nome e idade. Crie um construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado. Forne\u00e7a um construtor sem argumento com valores default caso nenhum inicializador seja fornecido;\n\n\nCrie um arquivo .jar do pacote definido anteriormente, e adicione-o \u00e0 vari\u00e1vel classpath ou ao projeto do NetBeans;\n\n\nCriar uma classe Teste para instancia\u00e7\u00e3o da classe Aluno e chamada dos m\u00e9todos notaFinal() e dadosAluno());\n\n\nTente acessar as vari\u00e1veis de inst\u00e2ncia da classe Aluno sem os m\u00e9todos get e set. O que acontece?\n\n\nAdicionar o m\u00e9todo public passou() \u00e0 classe Aluno a fim de verificar se o aluno passou. Alterar a classe Teste a fim de testar o m\u00e9todo passou().\n\n\n\n\nExerc\u00edcio extra\n\u00b6\n\n\n\n\nA classe\u00a0Batedeira\u00a0controla a utiliza\u00e7\u00e3o de uma\u00a0batedeira\u00a0dom\u00e9stica.\u00a0A\u00a0batedeira\u00a0pode estar ligado ou desligado\u00a0(1\u00a0ou 0),\u00a0e\u00a0possuir apenas 4 velocidades de\u00a0funcionamento (5, 10, 15, 20).\u00a0As vari\u00e1veis devem ser de inst\u00e2ncia e encapsuladas.\u00a0Assim, responda:\u00a0\n\n\nDefina a classe\u00a0Batedeira\u00a0e suas vari\u00e1veis;\n\n\nDefina os\u00a0construtores\u00a0da classe\u00a0Batedeira;\n\n\nDefina os m\u00e9todos\u00a0setters\u00a0e\u00a0getters\u00a0da classe\u00a0Batedeira;\n\n\nDefina um m\u00e9todo de inst\u00e2ncia para desligar a batedeira.\u00a0Quando desligada\u00a0a\u00a0batedeira,\u00a0a mesma\u00a0deve estar com a velocidade zero, caso contr\u00e1rio n\u00e3o pode ser desligada;\n\n\nDefina um m\u00e9todo de inst\u00e2ncia para aumentar a velocidade da\u00a0batedeira\u00a0em X unidades;\n\n\nDefina um m\u00e9todo de classe que retorna a\u00a0batedeira\u00a0que possui a menor velocidade dentre duas\u00a0batedeiras\u00a0passados como par\u00e2metro ao m\u00e9todo;\n\n\nSupondo que esteja na classe\u00a0TestaBatedeira, crie c\u00f3digos que fa\u00e7am chamada aos m\u00e9todos criados nas letras \u2018e\u2019 e \u2018f\u2019;\n\n\nDescreva o que aconteceria em termos conceituais (n\u00e3o \u00e9 preciso\u00a0implementar) se as vari\u00e1veis de inst\u00e2ncia da classe\u00a0Batedeira\u00a0fossem alteradas para do tipo \u201cclasse\u201d.",
            "title": "Lista de exerc\u00edcios 3"
        },
        {
            "location": "/lista-3/#lista_de_exercicios_3",
            "text": "Lista de exerc\u00edcios propostos pelo  Prof. Daniel Facciolo Pires .   Encapsulamento  Cria\u00e7\u00e3o de Pacotes   Acesse os  C\u00f3digos .",
            "title": "Lista de Exerc\u00edcios 3"
        },
        {
            "location": "/lista-3/#exercicio_1",
            "text": "Crie uma classe em Java chamada Cliente contendo as vari\u00e1veis de inst\u00e2ncia private numeroConta (String), numeroAgencia (String), nome (String) e saldo (float), e os m\u00e9todos getters e setters para todas as vari\u00e1veis privadas. Para a cria\u00e7\u00e3o dos m\u00e9todos setters, o n\u00famero da conta deve obrigatoriamente ter tamanho 8, contando o tra\u00e7o do d\u00edgito verificador. O n\u00famero da ag\u00eancia deve ter tamanho 6, tamb\u00e9m contando o tra\u00e7o do d\u00edgito verificador. Verificar em ambos os casos a presen\u00e7a do d\u00edgito verificador. O nome do cliente n\u00e3o pode ultrapassar 30 caracteres. O saldo da conta n\u00e3o tem restri\u00e7\u00e3o;  Coloque a classe Cliente em um pacote;  Crie os m\u00e9todos public  realizarDeposito() e realizarSaque() que, realizam dep\u00f3sito e saque, respectivamente, na conta do cliente. Crie um outro m\u00e9todo public para imprimir o numero da conta, nome da agencia, nome do cliente e saldo atual. Crie um m\u00e9todo construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado. Forne\u00e7a um construtor sem argumento com valores default caso nenhum inicializador seja fornecido;  Crie um arquivo .jar do seu projeto. Em seguida, crie outro projeto para testar sua classe Cliente. Adicione o .JAR do primeiro projeto nesse segundo projeto;  Criar uma classe Teste para instancia\u00e7\u00e3o da classe Cliente como Fulano. Chamar os m\u00e9todos realizarDeposito() e realizarSaque() nessa classe para que o saldo seja modificado. Nao se esque\u00e7a de importar a classe Cliente na classe Teste;  Tente acessar as vari\u00e1veis de inst\u00e2ncia da classe Cliente sem os m\u00e9todos get e set. O que acontece?  Criar, tamb\u00e9m na classe teste, um outro cliente (Beltrano) e realizar as mesmas atividades do Fulano. N\u00e3o se esque\u00e7a de importar a classe Cliente na classe Teste.",
            "title": "Exerc\u00edcio 1"
        },
        {
            "location": "/lista-3/#exercicio_2",
            "text": "Crie uma classe em Java chamada Aluno contendo as vari\u00e1veis de inst\u00e2ncia private numeroAluno (int), nome (String), idade (int), p1 (float) e p2 (float), e os m\u00e9todos getters e setters para todas as vari\u00e1veis privadas. Para a cria\u00e7\u00e3o dos m\u00e9todos setters, assuma que: o n\u00famero do aluno deve ter tamanho exatamente igual a 6. O nome do aluno n\u00e3o pode ultrapassar tamanho 30. A idade, e as notas p1 e p2 n\u00e3o podem ser negativas;  Coloque a classe Aluno em um pacote;  Crie os m\u00e9todos public notaFinal() - que calcula e imprime a m\u00e9dia final do aluno - , e dadosAluno() - que imprime as vari\u00e1veis de inst\u00e2ncia numeroAluno, nome e idade. Crie um construtor para inicializa\u00e7\u00e3o das vari\u00e1veis quando um objeto da classe for criado. Forne\u00e7a um construtor sem argumento com valores default caso nenhum inicializador seja fornecido;  Crie um arquivo .jar do pacote definido anteriormente, e adicione-o \u00e0 vari\u00e1vel classpath ou ao projeto do NetBeans;  Criar uma classe Teste para instancia\u00e7\u00e3o da classe Aluno e chamada dos m\u00e9todos notaFinal() e dadosAluno());  Tente acessar as vari\u00e1veis de inst\u00e2ncia da classe Aluno sem os m\u00e9todos get e set. O que acontece?  Adicionar o m\u00e9todo public passou() \u00e0 classe Aluno a fim de verificar se o aluno passou. Alterar a classe Teste a fim de testar o m\u00e9todo passou().",
            "title": "Exerc\u00edcio 2"
        },
        {
            "location": "/lista-3/#exercicio_extra",
            "text": "A classe\u00a0Batedeira\u00a0controla a utiliza\u00e7\u00e3o de uma\u00a0batedeira\u00a0dom\u00e9stica.\u00a0A\u00a0batedeira\u00a0pode estar ligado ou desligado\u00a0(1\u00a0ou 0),\u00a0e\u00a0possuir apenas 4 velocidades de\u00a0funcionamento (5, 10, 15, 20).\u00a0As vari\u00e1veis devem ser de inst\u00e2ncia e encapsuladas.\u00a0Assim, responda:\u00a0  Defina a classe\u00a0Batedeira\u00a0e suas vari\u00e1veis;  Defina os\u00a0construtores\u00a0da classe\u00a0Batedeira;  Defina os m\u00e9todos\u00a0setters\u00a0e\u00a0getters\u00a0da classe\u00a0Batedeira;  Defina um m\u00e9todo de inst\u00e2ncia para desligar a batedeira.\u00a0Quando desligada\u00a0a\u00a0batedeira,\u00a0a mesma\u00a0deve estar com a velocidade zero, caso contr\u00e1rio n\u00e3o pode ser desligada;  Defina um m\u00e9todo de inst\u00e2ncia para aumentar a velocidade da\u00a0batedeira\u00a0em X unidades;  Defina um m\u00e9todo de classe que retorna a\u00a0batedeira\u00a0que possui a menor velocidade dentre duas\u00a0batedeiras\u00a0passados como par\u00e2metro ao m\u00e9todo;  Supondo que esteja na classe\u00a0TestaBatedeira, crie c\u00f3digos que fa\u00e7am chamada aos m\u00e9todos criados nas letras \u2018e\u2019 e \u2018f\u2019;  Descreva o que aconteceria em termos conceituais (n\u00e3o \u00e9 preciso\u00a0implementar) se as vari\u00e1veis de inst\u00e2ncia da classe\u00a0Batedeira\u00a0fossem alteradas para do tipo \u201cclasse\u201d.",
            "title": "Exerc\u00edcio extra"
        },
        {
            "location": "/lista-4/",
            "text": "Lista de Exerc\u00edcios 4\n\u00b6\n\n\nLista de exerc\u00edcios propostos pelo \nProf. Daniel Facciolo Pires\n.\n\n\n\n\nAssocia\u00e7\u00e3o\n\n\n\n\nAcesse os \nC\u00f3digos\n.\n\n\nExerc\u00edcio 1\n\u00b6\n\n\n\n\nDe acordo com o Diagrama de Classes da UML acima:\n\n\n\n\nCrie as classes Passageiro, Reserva e V\u00f4o, bem como suas vari\u00e1veis. Todas as vari\u00e1veis s\u00e3o encapsuladas.\n\n\nCrie os m\u00e9todos construtores sem par\u00e2metro e com par\u00e2metros para todas as classes\n\n\nCrie os m\u00e9todos:\n\n    a) set e get da classe V\u00f4o\n\n    b) set e get da classe Reserva\n\n    c) set e get da classe Passageiro\n\n\nCrie um m\u00e9todo de inst\u00e2ncia na classe Voo que mostra as informa\u00e7\u00f5es da classe Voo;\n\n\nCrie um m\u00e9todo de inst\u00e2ncia na classe Reserva que mostra as informa\u00e7\u00f5es da classe Reserva;\n\n\nCrie um m\u00e9todo de inst\u00e2ncia na classe Passageiro que mostra as informa\u00e7\u00f5es da classe Passageiro;\n\n\nCrie uma classe chamada TestaPassageiro que cria inst\u00e2ncias da classe Passageiro, e testa todos os m\u00e9todos criados nos itens anteriores\n\n\n\n\nExerc\u00edcio 2\n\u00b6\n\n\n\n\nDe acordo com o Diagrama de Classes da UML acima, implemente os m\u00e9todos:\n\n\n\n\nPassageiro\n\n\nconstrutores\n\n\ngetters e setters\n\n\npublic String mostra()\n\n\n\n\n\n\nOnibus\n\n\nconstrutores\n\n\ngetters e setters\n\n\npublic String mostra()\n\n\npublic void associaPassageiro(Passageiro passageiro){\n\n\npublic boolean desvincularPassageiro(Passageiro passageiro){\n\n\npublic boolean obterPassageiro(Passageiro passageiro)\n\n\npublic boolean obterPassageiro(String cpf){\n\n\nprivate int obterPosicaoPassageiro(Passageiro passageiro){\n\n\nprivate int obterPosicaoPassageiro(String cpf){\n\n\npublic boolean atualizaPassageiro(Passageiro passageiro){\n\n\n\n\n\n\nRodoviaria\n\n\nconstrutores\n\n\ngetters e setters\n\n\npublic String mostra()\n\n\npublic void associaOnibus(Onibus onibus){\n\n\npublic boolean associaPassageiroOnibus(Onibus on, Passageiro pas){\n\n\npublic boolean desvinculaOnibus(Onibus onibus){\n\n\npublic boolean desvinculaPassageiroOnibus(Passageiro passageiro, Onibus onibus)\n\n\npublic boolean obterOnibus(Onibus onibus)\n\n\npublic boolean obterPassageiroOnibus(Onibus onibus, Passageiro passageiro)\n\n\npublic boolean obterOnibus(int numero)\n\n\nprivate int obterPosicaoOnibus(Onibus onibus)\n\n\nprivate int obterPosicaoOnibus(int numero)\n\n\npublic boolean atualizaOnibus(Onibus atual, Onibus novo)\n\n\npublic boolean atualizaPassageiroOnibus(Onibus onibus, Passageiro passageiro)\n\n\n\n\n\n\nFa\u00e7a o TestaRodoviaria para chamar os m\u00e9todos criados na Rodovi\u00e1ria.\n\n\n\n\nExerc\u00edcio 3\n\u00b6\n\n\n\n\nDe acordo com o Diagrama de Classes da UML acima, implemente os m\u00e9todos:\n\n\n\n\nTopico\n\n\nconstrutores\n\n\ngetters e setters\n\n\npublic String mostra()\n\n\n\n\n\n\nDisciplina\n\n\nconstrutores\n\n\ngetters e setters\n\n\npublic String mostra()\n\n\npublic void associaTopico(Topico topico){\n\n\npublic boolean desvincularTopico(Topico topico){\n\n\npublic boolean obterTopico(Topico topico)\n\n\npublic boolean obterTopico(String cpf){\n\n\nprivate int obterPosicaoTopicoo(Topico topico){\n\n\nprivate int obterPosicaoTopico(String cpf){\n\n\npublic boolean atualizaTopico(Topico topico){\n\n\n\n\n\n\nCurso\n\n\nconstrutores\n\n\ngetters e setters\n\n\npublic String mostra()\n\n\npublic void associaDisciplina(Disciplina disciplina){\n\n\npublic boolean associaTopicoDisciplina(Disciplina disciplina, Topico topico){\n\n\npublic boolean desvinculaDisciplina(Disciplina disciplina){\n\n\npublic boolean desvinculaTopicoDisciplina(Disciplina disciplina, Topico topico)\n\n\npublic boolean obterDisciplina (Disciplina disciplina)\n\n\npublic boolean obterTopicoDisciplina (Disciplina disciplina, Topico topico)\n\n\npublic boolean obterDisciplina(int numero)\n\n\nprivate int obterPosicaoDisciplina(Disciplina disciplina)\n\n\nprivate int obterPosicaoDisciplina(int numero)\n\n\npublic boolean atualizaDisciplina (Disciplina disciplina)\n\n\npublic boolean atualizaPassageiroOnibus(Disciplina disciplina, Topico topico)\n\n\n\n\n\n\nFa\u00e7a o TestaCurso para chamar os m\u00e9todos criados no Curso.",
            "title": "Lista de exerc\u00edcios 4"
        },
        {
            "location": "/lista-4/#lista_de_exercicios_4",
            "text": "Lista de exerc\u00edcios propostos pelo  Prof. Daniel Facciolo Pires .   Associa\u00e7\u00e3o   Acesse os  C\u00f3digos .",
            "title": "Lista de Exerc\u00edcios 4"
        },
        {
            "location": "/lista-4/#exercicio_1",
            "text": "De acordo com o Diagrama de Classes da UML acima:   Crie as classes Passageiro, Reserva e V\u00f4o, bem como suas vari\u00e1veis. Todas as vari\u00e1veis s\u00e3o encapsuladas.  Crie os m\u00e9todos construtores sem par\u00e2metro e com par\u00e2metros para todas as classes  Crie os m\u00e9todos: \n    a) set e get da classe V\u00f4o \n    b) set e get da classe Reserva \n    c) set e get da classe Passageiro  Crie um m\u00e9todo de inst\u00e2ncia na classe Voo que mostra as informa\u00e7\u00f5es da classe Voo;  Crie um m\u00e9todo de inst\u00e2ncia na classe Reserva que mostra as informa\u00e7\u00f5es da classe Reserva;  Crie um m\u00e9todo de inst\u00e2ncia na classe Passageiro que mostra as informa\u00e7\u00f5es da classe Passageiro;  Crie uma classe chamada TestaPassageiro que cria inst\u00e2ncias da classe Passageiro, e testa todos os m\u00e9todos criados nos itens anteriores",
            "title": "Exerc\u00edcio 1"
        },
        {
            "location": "/lista-4/#exercicio_2",
            "text": "De acordo com o Diagrama de Classes da UML acima, implemente os m\u00e9todos:   Passageiro  construtores  getters e setters  public String mostra()    Onibus  construtores  getters e setters  public String mostra()  public void associaPassageiro(Passageiro passageiro){  public boolean desvincularPassageiro(Passageiro passageiro){  public boolean obterPassageiro(Passageiro passageiro)  public boolean obterPassageiro(String cpf){  private int obterPosicaoPassageiro(Passageiro passageiro){  private int obterPosicaoPassageiro(String cpf){  public boolean atualizaPassageiro(Passageiro passageiro){    Rodoviaria  construtores  getters e setters  public String mostra()  public void associaOnibus(Onibus onibus){  public boolean associaPassageiroOnibus(Onibus on, Passageiro pas){  public boolean desvinculaOnibus(Onibus onibus){  public boolean desvinculaPassageiroOnibus(Passageiro passageiro, Onibus onibus)  public boolean obterOnibus(Onibus onibus)  public boolean obterPassageiroOnibus(Onibus onibus, Passageiro passageiro)  public boolean obterOnibus(int numero)  private int obterPosicaoOnibus(Onibus onibus)  private int obterPosicaoOnibus(int numero)  public boolean atualizaOnibus(Onibus atual, Onibus novo)  public boolean atualizaPassageiroOnibus(Onibus onibus, Passageiro passageiro)    Fa\u00e7a o TestaRodoviaria para chamar os m\u00e9todos criados na Rodovi\u00e1ria.",
            "title": "Exerc\u00edcio 2"
        },
        {
            "location": "/lista-4/#exercicio_3",
            "text": "De acordo com o Diagrama de Classes da UML acima, implemente os m\u00e9todos:   Topico  construtores  getters e setters  public String mostra()    Disciplina  construtores  getters e setters  public String mostra()  public void associaTopico(Topico topico){  public boolean desvincularTopico(Topico topico){  public boolean obterTopico(Topico topico)  public boolean obterTopico(String cpf){  private int obterPosicaoTopicoo(Topico topico){  private int obterPosicaoTopico(String cpf){  public boolean atualizaTopico(Topico topico){    Curso  construtores  getters e setters  public String mostra()  public void associaDisciplina(Disciplina disciplina){  public boolean associaTopicoDisciplina(Disciplina disciplina, Topico topico){  public boolean desvinculaDisciplina(Disciplina disciplina){  public boolean desvinculaTopicoDisciplina(Disciplina disciplina, Topico topico)  public boolean obterDisciplina (Disciplina disciplina)  public boolean obterTopicoDisciplina (Disciplina disciplina, Topico topico)  public boolean obterDisciplina(int numero)  private int obterPosicaoDisciplina(Disciplina disciplina)  private int obterPosicaoDisciplina(int numero)  public boolean atualizaDisciplina (Disciplina disciplina)  public boolean atualizaPassageiroOnibus(Disciplina disciplina, Topico topico)    Fa\u00e7a o TestaCurso para chamar os m\u00e9todos criados no Curso.",
            "title": "Exerc\u00edcio 3"
        }
    ]
}